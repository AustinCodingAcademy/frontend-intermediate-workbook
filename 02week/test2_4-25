'use strict';

const assert = require('assert');
const readline = require('readline');
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function getPrompt() {
  rl.question('word ', (answer) => {
    console.log( pigLatin(answer) );
    getPrompt();
  })
  function pigLatin(input) {
  var word = input.toLowerCase();
  let lowestVowel = word.length;

  if (word.charAt(0) === 'a' || word.charAt(0) === 'e' || word.charAt(0) === 'i' || word.charAt(0) === 'o' || word.charAt(0) === 'u')  {
    console.log(word + 'yay') ;
  }
  else if (word.indexOf('a') >= 0 && word.indexOf('a') < lowestVowel || (word.indexOf('e') >= 0 && word.indexOf('e') < lowestVowel || (word.indexOf('i') >= 0 && word.indexOf('i') < lowestVowel || (word.indexOf('o')
  >= 0 && word.indexOf('o') < lowestVowel || (word.indexOf('u') >= 1 && word.indexOf('u') < lowestVowel)))))

      {lowestVowel = word.indexOf('a') || word.indexOf('e') || word.indexOf('i') || word.indexOf('o') || word.indexOf('u') ;
    var first = word.slice(0, lowestVowel);
    var mid = word.slice(lowestVowel);
    console.log(mid + first + 'ay');
  }
}

}
/*public static String doStuff(String word) {
    String vowels = "aeiouAEIOU";
    for (int i = 0; i < word.length(); i++) {
        if (vowels.contains(""+word.charAt(i))) {
            String prefix = word.substring(0, i);
            String suffix = word.substring(i);
            word = suffix + prefix + "ay";
            break;
        }
    }*/

// Tests

if (typeof describe === 'function') {

  describe('#pigLatin()', () => {
    it('should translate a simple word', () => {
      assert.equal(pigLatin('car'), 'arcay');
      assert.equal(pigLatin('dog'), 'ogday');
    });
    it('should translate a complex word', () => {
      assert.equal(pigLatin('create'), 'eatecray');
      assert.equal(pigLatin('valley'), 'alleyvay');
    });
    it('should attach "yay" if word begins with vowel', () => {
      assert.equal(pigLatin('egg'), 'eggyay');
      assert.equal(pigLatin('emission'), 'emissionyay');
    });
    it('should auto lowercase word before translation', () => {
      assert.equal(pigLatin('HeLlO'), 'ellohay');
      assert.equal(pigLatin('RoCkEt'), 'ocketray');
    });
  });
} else {

  getPrompt();

}
